<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wzUXRibbon="clr-namespace:WzUXRibbon"
                    xmlns:wzUXRibbonHelpers="clr-namespace:WzUXRibbon.Helpers"
                    xmlns:converters="clr-namespace:WzUXRibbon.Converters"
                    xmlns:controls="clr-namespace:WzUXRibbon.Controls"
                    xmlns:effects="clr-namespace:WzUXRibbon.Effects"
                    xmlns:attachedProperties="clr-namespace:WzUXRibbon.AttachedProperties"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:styleSelectors="clr-namespace:WzUXRibbon.StyleSelectors"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WzUXRibbon;component/Themes/ColorThemes/ColorTheme.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!-- Menu Item Template -->
    <ControlTemplate x:Key="Fluent.Ribbon.Templates.MenuItem"
                     TargetType="{x:Type MenuItem}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="25" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    Width="Auto"
                    Margin="0"
                    HorizontalAlignment="Stretch"
                    Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}"
                    BorderThickness="1"
                    Visibility="Collapsed" />
            <ContentPresenter x:Name="textBlock"
                              Grid.Column="1"
                              Width="Auto"
                              Height="Auto"
                              Margin="5 3 3 3"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              RecognizesAccessKey="{Binding Path=(controls:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}"
                              d:LayoutOverrides="Width" />
            <Border x:Name="iconImageBorder"
                    BorderThickness="1">
                <controls:IconPresenter x:Name="iconImage"
                                      Margin="3 2 2 2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      IconSize="{Binding Path=(attachedProperties:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Image x:Name="checkedImage"
                   Width="16"
                   Height="16"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   SnapsToDevicePixels="True"
                   Source="{DynamicResource Fluent.Ribbon.Images.Checked}"
                   Stretch="Uniform"
                   Visibility="Collapsed" />
            <TextBlock x:Name="gestureTextBlock"
                       Grid.Column="2"
                       Width="Auto"
                       Height="Auto"
                       Margin="3 3 15 3"
                       VerticalAlignment="Center"
                       Text="{TemplateBinding InputGestureText}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="InputGestureText" Value="{x:Null}">
                <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="InputGestureText" Value="">
                <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="checkedImage" Property="Effect">
                    <Setter.Value>
                        <effects:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
                <Setter TargetName="gestureTextBlock" Property="Opacity" Value="0.5" />
                <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Header Menu Item Template -->
    <ControlTemplate x:Key="Fluent.Ribbon.Templates.HeaderMenuItem"
                     TargetType="{x:Type MenuItem}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="25" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    Width="Auto"
                    Margin="0"
                    HorizontalAlignment="Stretch"
                    Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}"
                    BorderThickness="1"
                    Visibility="Collapsed" />
            <ContentPresenter x:Name="textBlock"
                              Grid.Column="1"
                              Width="Auto"
                              Height="Auto"
                              Margin="5 3 3 3"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              RecognizesAccessKey="{Binding Path=(controls:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}"
                              d:LayoutOverrides="Width" />
            <Border x:Name="iconImageBorder"
                    BorderThickness="1">
                <controls:IconPresenter x:Name="iconImage"
                                      Margin="3 2 2 2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      IconSize="{Binding Path=(attachedProperties:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Image x:Name="checkedImage"
                   Width="16"
                   Height="16"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   SnapsToDevicePixels="True"
                   Source="{DynamicResource Fluent.Ribbon.Images.Checked}"
                   Stretch="Uniform"
                   Visibility="Collapsed" />
            <Path x:Name="path"
                  Grid.Column="3"
                  Width="4"
                  Height="7"
                  Margin="1 0 9 0"
                  HorizontalAlignment="Right"
                  Data="M0,0L1,1 0,2z"
                  Fill="{DynamicResource Fluent.Ribbon.Brushes.MenuItem.SubMenu.Arrow.Fill}"
                  Stretch="Fill"
                  Stroke="{x:Null}" />
            <Popup x:Name="PART_Popup"
                   Grid.ColumnSpan="2"
                   Margin="0 0 -4 0"
                   VerticalAlignment="Top"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   Placement="Right"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <controls:ResizeableContentControl x:Name="PART_PopupContentControl"
                                                 MinWidth="{TemplateBinding ActualWidth}"
                                                 MinHeight="{TemplateBinding ActualHeight}">
                    <ScrollViewer x:Name="PART_ScrollViewer"
                                  Style="{DynamicResource Fluent.Ribbon.Styles.MenuScrollViewer}"
                                  Margin="1"
                                  SnapsToDevicePixels="True">
                        <StackPanel x:Name="PART_MenuPanel"
                                    IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    Orientation="Vertical" />
                    </ScrollViewer>
                </controls:ResizeableContentControl>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="checkedImage" Property="Effect">
                    <Setter.Value>
                        <effects:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
                <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Splited Menu Item Template -->
    <ControlTemplate x:Key="Fluent.Ribbon.Templates.SplitedMenuItem"
                     TargetType="{x:Type MenuItem}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="25" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Rectangle Grid.Column="2"
                       Width="1"
                       Margin="0 4 23 4"
                       HorizontalAlignment="Right"
                       Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.Border}" />

            <Grid Grid.Column="0"
                  Grid.ColumnSpan="3"
                  Width="Auto"
                  Margin="0"
                  HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.905*" />
                    <ColumnDefinition x:Name="columnDefinition"
                                      Width="23" />
                </Grid.ColumnDefinitions>
                <Border x:Name="PART_ButtonBorder"
                        Margin="0 0 -1 0"
                        Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}"
                        BorderThickness="1"
                        Visibility="Collapsed" />
                <Border x:Name="Submenu_Border"
                        Grid.Column="1"
                        Width="Auto"
                        Margin="0"
                        HorizontalAlignment="Stretch"
                        Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}"
                        BorderThickness="1"
                        Visibility="Collapsed" />
            </Grid>
            <ContentPresenter x:Name="textBlock"
                              Grid.Column="1"
                              Width="Auto"
                              Height="Auto"
                              Margin="5 3 3 3"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              RecognizesAccessKey="{Binding Path=(controls:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}"
                              d:LayoutOverrides="Width" />
            <Border x:Name="iconImageBorder"
                    BorderThickness="1">
                <controls:IconPresenter x:Name="iconImage"
                                      Margin="3 2 2 2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      IconSize="{Binding Path=(attachedProperties:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Image x:Name="checkedImage"
                   Width="16"
                   Height="16"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   SnapsToDevicePixels="True"
                   Source="{DynamicResource Fluent.Ribbon.Images.Checked}"
                   Stretch="Uniform"
                   Visibility="Collapsed" />
            <Path x:Name="path"
                  Grid.Column="3"
                  Width="4"
                  Height="7"
                  Margin="1 0 9 0"
                  HorizontalAlignment="Right"
                  Data="M0,0L1,1 0,2z"
                  Fill="{DynamicResource Fluent.Ribbon.Brushes.MenuItem.SubMenu.Arrow.Fill}"
                  Stretch="Fill"
                  Stroke="{x:Null}" />
            <Popup x:Name="PART_Popup"
                   Grid.ColumnSpan="2"
                   Margin="0 0 -4 0"
                   VerticalAlignment="Top"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   Placement="Right"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <controls:ResizeableContentControl x:Name="PART_PopupContentControl"
                                                 MinWidth="{TemplateBinding ActualWidth}"
                                                 MinHeight="{TemplateBinding ActualHeight}">
                    <ScrollViewer x:Name="PART_ScrollViewer"
                                  Style="{DynamicResource Fluent.Ribbon.Styles.MenuScrollViewer}"
                                  Margin="1"
                                  SnapsToDevicePixels="True">
                        <StackPanel x:Name="PART_MenuPanel"
                                    IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    Orientation="Vertical" />
                    </ScrollViewer>
                </controls:ResizeableContentControl>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="checkedImage" Property="Effect">
                    <Setter.Value>
                        <effects:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
                <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Menu Item with Description Template -->
    <ControlTemplate x:Key="Fluent.Ribbon.Templates.MenuItemWithDescription"
                     TargetType="{x:Type controls:MenuItem}">
        <Grid Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="45" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border"
                    Grid.RowSpan="2"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    Width="Auto"
                    Margin="0"
                    HorizontalAlignment="Stretch"
                    Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Border}"
                    BorderThickness="1"
                    Visibility="Collapsed" />
            <ContentControl x:Name="textBlock"
                            Grid.Column="1"
                            Width="Auto"
                            Height="Auto"
                            Margin="0 3 3 3"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            TextElement.FontWeight="Bold"
                            d:LayoutOverrides="Width" />
            <ContentPresenter x:Name="descriptionPresenter"
                              Grid.Row="1"
                              Grid.Column="1"
                              Width="Auto"
                              Height="Auto"
                              Margin="0 3 3 3"
                              VerticalAlignment="Center"
                              ContentSource="Description"
                              RecognizesAccessKey="{Binding Path=(controls:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}"
                              d:LayoutOverrides="Width" />
            <Border x:Name="iconImageBorder"
                    BorderThickness="1">
                <controls:IconPresenter x:Name="iconImage"
                                      Margin="3 2 2 2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      IconSize="{Binding Path=(attachedProperties:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Image x:Name="checkedImage"
                   Width="16"
                   Height="16"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   SnapsToDevicePixels="True"
                   Source="{DynamicResource Fluent.Ribbon.Images.Checked}"
                   Stretch="Uniform"
                   Visibility="Collapsed" />
            <TextBlock x:Name="gestureTextBlock"
                       Grid.Column="2"
                       Width="Auto"
                       Height="Auto"
                       Margin="3 3 15 3"
                       VerticalAlignment="Center"
                       Text="{TemplateBinding InputGestureText}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="InputGestureText" Value="{x:Null}">
                <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="InputGestureText" Value="">
                <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="checkedImage" Property="Effect">
                    <Setter.Value>
                        <effects:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
                <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Menu Item Style -->
    <Style x:Key="Fluent.Ribbon.Styles.MenuItem"
           TargetType="{x:Type controls:MenuItem}">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.MenuItem.Background}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Fluent.Ribbon.Styles.FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelText}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.MenuItem}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="controls:MenuItem.IsSplited" Value="True" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.SplitedMenuItem}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="controls:MenuItem.IsSplited" Value="False" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.HeaderMenuItem}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={x:Static converters:IsNullConverter.Instance}}" Value="False">
                <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.MenuItemWithDescription}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>